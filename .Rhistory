} else {
break
}
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
page <- page + 1
if(p_test & page > 2) break
}
names(all_results) <- c('Facility', 'Activity', 'Date', 'Time', 'Details', 'node_url')
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
retrieve_data(p_activity='Skating', p_test=T)
x<-readRDS('data_raw/Skating_20161217.rds')
x
retrieve_data <- function(p_activity = 'Skating', p_test = TRUE) {
all_results <- data.frame()
page = 0
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, page)
print(city_url)
#   For some reason, need to use httr::GET
#   htmlTreeParse retrieved the wrong data as if query string was ignored)
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
#   Grab node_url to enable linking to the city's actual Facility/Activity page
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
result_page$Facility2 <- xpathSApply(doc, '//td[@class="views-field views-field-field-diss-facility"]//a/text()', xmlValue)
} else {
break
}
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
page <- page + 1
if(p_test & page > 2) break
}
names(all_results) <- c('Facility', 'Activity', 'Date', 'Time', 'Details', 'node_url')
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
retrieve_data(p_activity='Skating', p_test=T)
retrieve_data <- function(p_activity = 'Skating', p_test = TRUE) {
all_results <- data.frame()
page = 0
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, page)
print(city_url)
#   For some reason, need to use httr::GET
#   htmlTreeParse retrieved the wrong data as if query string was ignored)
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
#   Grab node_url to enable linking to the city's actual Facility/Activity page
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
result_page$Facility <- xpathSApply(doc, '//td[@class="views-field views-field-field-diss-facility"]//a/text()', xmlValue)
} else {
break
}
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
page <- page + 1
if(p_test & page > 2) break
}
names(all_results) <- c('Facility', 'Activity', 'Date', 'Time', 'Details', 'node_url')
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
retrieve_data(p_activity='Skating', p_test=T)
retrieve_data(p_activity='Skating', p_test=T)
retrieve_data <- function(p_activity = 'Skating', p_test = TRUE) {
all_results <- data.frame()
page = 0
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, page)
print(city_url)
#   For some reason, need to use httr::GET
#   htmlTreeParse retrieved the wrong data as if query string was ignored)
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
#   Grab node_url to enable linking to the city's actual Facility/Activity page
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
result_page$Facility <- xpathSApply(doc, '//td[@class="views-field views-field-field-diss-facility"]//a/text()', xmlValue)
} else {
break
}
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
page <- page + 1
if(p_test & page > 2) break
if(page > 12) break
}
names(all_results) <- c('Facility', 'Activity', 'Date', 'Time', 'Details', 'node_url')
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
retrieve_data(p_activity='Skating', p_test=T)
retrieve_data <- function(p_activity = 'Skating', p_test = TRUE) {
all_results <- data.frame()
page = 0
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, page)
print(city_url)
#   For some reason, need to use httr::GET
#   htmlTreeParse retrieved the wrong data as if query string was ignored)
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
#   Grab node_url to enable linking to the city's actual Facility/Activity page
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
result_page$Facility <- xpathSApply(doc, '//td[@class="views-field views-field-field-diss-facility"]//a/text()', xmlValue)
} else {
break
}
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
page <- page + 1
if(p_test & page > 2) break
if(page > 12) break
}
names(all_results) <- c('Facility', 'Activity', 'Date', 'Time', 'Details', 'node_url')
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
debug(retrieve_data)
retrieve_data(p_activity='Skating', p_test=T)
str(result_page)
xpathSApply(doc, '//td[@class="views-field views-field-field-diss-facility"]//a/text()', xmlValue)
class(xpathSApply(doc, '//td[@class="views-field views-field-field-diss-facility"]//a/text()', xmlValue))
as.factor(xpathSApply(doc, '//td[@class="views-field views-field-field-diss-facility"]//a/text()', xmlValue))
result_page$Facility
result_page
retrieve_data <- function(p_activity = 'Skating', p_test = TRUE) {
all_results <- data.frame()
page = 0
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, page)
print(city_url)
#   For some reason, need to use httr::GET
#   htmlTreeParse retrieved the wrong data as if query string was ignored)
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
#   Grab node_url to enable linking to the city's actual Facility/Activity page
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
result_page$Facility <- as.factor(xpathSApply(doc, '//td[@class="views-field views-field-field-diss-facility"]//a/text()', xmlValue))
} else {
break
}
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
page <- page + 1
if(p_test & page > 2) break
if(page > 12) break
}
names(all_results) <- c('Facility', 'Activity', 'Date', 'Time', 'Details', 'node_url')
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
retrieve_data(p_activity='Skating', p_test=T)
debug(retrieve_data)
retrieve_data(p_activity='Skating', p_test=T)
result_page
result_page[,]
result_page[,1]
retrieve_data <- function(p_activity = 'Skating', p_test = TRUE) {
all_results <- data.frame()
page = 0
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, page)
print(city_url)
#   For some reason, need to use httr::GET
#   htmlTreeParse retrieved the wrong data as if query string was ignored)
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
#   Grab node_url to enable linking to the city's actual Facility/Activity page
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
result_page[,1] <- xpathSApply(doc, '//td[@class="views-field views-field-field-diss-facility"]//a/text()', xmlValue)
} else {
break
}
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
page <- page + 1
if(p_test & page > 2) break
if(page > 12) break
}
names(all_results) <- c('Facility', 'Activity', 'Date', 'Time', 'Details', 'node_url')
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
retrieve_data(p_activity='Skating', p_test=T)
retrieve_data(p_activity='Skating')
retrieve_data(p_activity='Skating', p_test=F)
format_data()
p_activity='Skating'
min(list.files(path = folder_raw, pattern = p_activity, full.names = TRUE))
load_data_raw <- function(p_activity='Skating') {
file <- max(list.files(path = folder_raw, pattern = p_activity, full.names = TRUE))
as.data.table(readRDS(file))
}
format_data()
format_data()[is.na(Locale),]
arenas
rm(facilities)
facilities <- matrix(c(  'Bell Centennial Arena', 'West End', '45.324412', '-75.811532'
, 'Belltown Dome', 'West End', '45.360014', '-75.803732'
, 'Bernard-GrandmaÃ®tre Arena', 'East', '45.432813', '-75.655395'
, 'Blackburn Arena', 'East', '45.43', '-75.563149'
, 'Bob MacQuarrie Recreation Complex - OrlÃ©ans', 'East', '45.466459', '-75.545228'
, 'Brewer Pool and Arena', 'Central', '45.389097', '-75.691057'
, 'Canterbury Recreation Complex', 'Central', '45.390558', '-75.628903'
, 'Champagne Fitness Centre', 'Central', '45.430659', '-75.686719'
, 'Deborah Anne Kirwan Pool', 'South', '45.367799', '-75.656587'
, 'Dempsey Community Centre', '', '', ''
, 'Earl Armstrong Arena', 'East', '45.43588', '-75.602864'
, 'Eva James Memorial Community Centre', '', '', ''
, 'FranÃ§ois Dupuis Recreation Centre', 'East', '45.457012', '-75.449182'
, 'Fred Barrett Arena', 'South', '45.331162', '-75.598078'
, 'Goulbourn Recreation Complex', 'West', '45.263237', '-75.907526'
, 'Greenboro Community Centre', '', '', ''
, 'Hintonburg Community Centre', '', '', ''
, 'Howard Darwin Centennial Arena', 'West End', '45.341963', '-75.72629'
, 'Hunt Club-Riverside Park Community Centre', '', '', ''
, 'J.A. Dulude Arena', 'West End', '45.373757', '-75.743907'
, 'Jack Charron Arena', 'West', '45.293619', '-75.883852'
, 'Jack Purcell Community Centre', 'Central', '45.415769', '-75.689533'
, 'Jim Durrell Recreation Centre', 'Central', '45.372846', '-75.6597'
, 'John G. Mlacak Community Centre', 'West', '45.320822', '-75.897182'
, 'Johnny Leroux Stittsville Community Arena', 'West', '45.260748', '-75.925043'
, 'Kanata Leisure Centre and Wave Pool', 'West', '45.311241', '-75.898782'
, 'Kanata Recreation Complex', 'West', '45.295047', '-75.903432'
, 'Larry Robinson Arena', 'South', '45.230279', '-75.46887'
, 'Lowertown Pool', 'Central', '45.434277', '-75.681504'
, 'Manotick Arena', 'South', '45.22092', '-75.68733'
, 'McNabb Recreation Centre', 'Central', '45.409026', '-75.702634'
, 'Minto Recreation Complex - Barrhaven', 'South', '45.253397', '-75.736022'
, 'Navan Memorial Centre', 'East', '45.421381', '-75.421326'
, 'Nepean Sportsplex', 'West End', '45.326912', '-75.746002'
, 'Overbrook Community Centre', '', '', ''
, 'Pinecrest Recreation Complex', 'West End', '45.348021', '-75.773401'
, 'Plant Recreation Centre', 'Central', '45.40799', '-75.714452'
, 'R.J. Kennedy Arena', 'East', '45.514531', '-75.402976'
, 'Ray Friel Recreation Complex', 'East', '45.471382', '-75.49173'
, 'Richcraft Recreation Complex-Kanata', 'West', '45.344475', '-75.93036'
, 'Richmond Arena', 'South', '45.195657', '-75.837795'
, 'Rideauview Community Centre', '', '', ''
, 'Sandy Hill Arena', 'Central', '45.419286', '-75.673804'
, 'Sawmill Creek Community Centre and Pool', 'South', '45.350423', '-75.636775'
, 'Splash Wave Pool', 'East', '45.437087', '-75.600821'
, 'St-Laurent Complex', 'East', '45.43638', '-75.647014'
, 'Stuart Holmes Arena', 'South', '45.147472', '-75.601273'
, 'Tom Brown Arena', 'Central', '45.408105', '-75.722154'
, 'W. Erskine Johnston Arena', 'West', '45.349145', '-76.038851'
, 'Walter Baker Sports Centre', 'West', '45.280326', '-75.761861'), ncol=4, byrow = T)
colnames(facilities) <- c('Facility', 'Locale', 'Latitude', 'Longitude')
facilities <- as.data.frame(facilities, stringsAsFactors = F)
facilities
rm(x)
rm(X)
rm(z)
rm(zz)
rm(arenas)
activity_group
format_data <- function(p_activity='Skating') {
data <- load_data_raw(p_activity)
#----------------------------
#     Format dates
#----------------------------
#     Append current year to Date...
data$Date <- as.Date(paste0(data$Date, ', ', format(Sys.Date(), '%Y')), format = '%A, %B %d, %Y')
#     ...then add 1 year for any dates in the past
data[data$Date < Sys.Date(),]$Date <- data[data$Date < Sys.Date(),]$Date + years(1)
data <- cbind(data, trim(str_split(data$Time, '-', simplify = TRUE)))
setnames(data, old=c('V1', 'V2'), new=c('StartTime', 'EndTime'))
#----------------------------------------------------------------------------------
#     Join to Sessions lookup to shorten SessionType and retrieve SessionGroup
#----------------------------------------------------------------------------------
data$Activity <- gsub(pattern = paste0(p_activity, ' - '), replacement = '', x = data$Activity)
data <- merge(data, sessions, by = "Activity", all.x = TRUE)
data$SessionType <- data$shortname
#----------------------------------------------------
#     Join to Arenas lookup to retrieve Locale
#----------------------------------------------------
data <- merge(data, unique(arenas), by.x="Facility", by.y='Arena', all.x = TRUE)
data
}
format_data()
format_data <- function(p_activity='Skating') {
data <- load_data_raw(p_activity)
#----------------------------
#     Format dates
#----------------------------
#     Append current year to Date...
data$Date <- as.Date(paste0(data$Date, ', ', format(Sys.Date(), '%Y')), format = '%A, %B %d, %Y')
#     ...then add 1 year for any dates in the past
data[data$Date < Sys.Date(),]$Date <- data[data$Date < Sys.Date(),]$Date + years(1)
data <- cbind(data, trim(str_split(data$Time, '-', simplify = TRUE)))
setnames(data, old=c('V1', 'V2'), new=c('StartTime', 'EndTime'))
#----------------------------------------------------------------------------------
#     Join to Sessions lookup to shorten SessionType and retrieve SessionGroup
#----------------------------------------------------------------------------------
data$Activity <- gsub(pattern = paste0(p_activity, ' - '), replacement = '', x = data$Activity)
data <- merge(data, sessions, by = "Activity", all.x = TRUE)
data$SessionType <- data$shortname
#----------------------------------------------------
#     Join to Arenas lookup to retrieve Locale
#----------------------------------------------------
data <- merge(data, unique(facilities), by="Facility", all.x = TRUE)
data
}
format_data()
format_data <- function(p_activity='Skating') {
data <- load_data_raw(p_activity)
#----------------------------
#     Format dates
#----------------------------
#     Append current year to Date...
data$Date <- as.Date(paste0(data$Date, ', ', format(Sys.Date(), '%Y')), format = '%A, %B %d, %Y')
#     ...then add 1 year for any dates in the past
data[data$Date < Sys.Date(),]$Date <- data[data$Date < Sys.Date(),]$Date + years(1)
data <- cbind(data, trim(str_split(data$Time, '-', simplify = TRUE)))
setnames(data, old=c('V1', 'V2'), new=c('StartTime', 'EndTime'))
#----------------------------------------------------------------------------------
#     Join to Sessions lookup to shorten SessionType and retrieve SessionGroup
#----------------------------------------------------------------------------------
data$Activity <- gsub(pattern = paste0(p_activity, ' - '), replacement = '', x = data$Activity)
data <- merge(data, sessions, by = "Activity", all.x = TRUE)
data$SessionType <- data$shortname
#----------------------------------------------------
#     Join to Arenas lookup to retrieve Locale
#----------------------------------------------------
data <- merge(data, unique(facilities), by="Facility", all.x = TRUE)
data[,.Date, Activity, shortname, StartTime, EndTime, Facility, Locale, Longitude, Latitude, SessionGroup, SessionType)]
}
format_data <- function(p_activity='Skating') {
data <- load_data_raw(p_activity)
#----------------------------
#     Format dates
#----------------------------
#     Append current year to Date...
data$Date <- as.Date(paste0(data$Date, ', ', format(Sys.Date(), '%Y')), format = '%A, %B %d, %Y')
#     ...then add 1 year for any dates in the past
data[data$Date < Sys.Date(),]$Date <- data[data$Date < Sys.Date(),]$Date + years(1)
data <- cbind(data, trim(str_split(data$Time, '-', simplify = TRUE)))
setnames(data, old=c('V1', 'V2'), new=c('StartTime', 'EndTime'))
#----------------------------------------------------------------------------------
#     Join to Sessions lookup to shorten SessionType and retrieve SessionGroup
#----------------------------------------------------------------------------------
data$Activity <- gsub(pattern = paste0(p_activity, ' - '), replacement = '', x = data$Activity)
data <- merge(data, sessions, by = "Activity", all.x = TRUE)
data$SessionType <- data$shortname
#----------------------------------------------------
#     Join to Arenas lookup to retrieve Locale
#----------------------------------------------------
data <- merge(data, unique(facilities), by="Facility", all.x = TRUE)
data[,.(Date, Activity, shortname, StartTime, EndTime, Facility, Locale, Longitude, Latitude, SessionGroup, SessionType)]
}
format_data()
format_data <- function(p_activity='Skating') {
data <- load_data_raw(p_activity)
#----------------------------
#     Format dates
#----------------------------
#     Append current year to Date...
data$Date <- as.Date(paste0(data$Date, ', ', format(Sys.Date(), '%Y')), format = '%A, %B %d, %Y')
#     ...then add 1 year for any dates in the past
data[data$Date < Sys.Date(),]$Date <- data[data$Date < Sys.Date(),]$Date + years(1)
data <- cbind(data, trim(str_split(data$Time, '-', simplify = TRUE)))
setnames(data, old=c('V1', 'V2'), new=c('StartTime', 'EndTime'))
#----------------------------------------------------------------------------------
#     Join to Sessions lookup to shorten SessionType and retrieve SessionGroup
#----------------------------------------------------------------------------------
data$Activity <- gsub(pattern = paste0(p_activity, ' - '), replacement = '', x = data$Activity)
data <- merge(data, sessions, by = "Activity", all.x = TRUE)
data$SessionType <- data$shortname
#----------------------------------------------------
#     Join to Arenas lookup to retrieve Locale
#----------------------------------------------------
data <- merge(data, unique(facilities), by="Facility", all.x = TRUE)
data[,.(Date, StartTime, EndTime, Activity, shortname, Facility, Locale, Longitude, Latitude, SessionGroup, SessionType)]
}
format_data()
class(format_data())
rm(sessions)
sessions <- matrix(c( 'Skating 50+', '50+', 'Skating'
,'Adult Skating', 'Adult', 'Skating'
,'Family Skating', 'Family', 'Skating'
,'Public Skating', 'Public', 'Skating'
,'Unsupervised Skate', 'Unsupervised', 'Skating'
,'Pick-up Hockey - Adults 18+', 'Pickup 18+', 'Hockey'
,'Pick-up Hockey - Adults 35+', 'Pickup 35+', 'Hockey'
,'Pick-up Hockey - Adults 50+', 'Pickup 50+', 'Hockey'
,'Shinny Hockey - Child', 'Shinny - Children', 'Shinny'
,'Shinny Hockey - Youth (13-17 yrs)', 'Shinny - Youth', 'Shinny'
,'Figure Skating', 'Figure', 'Specialized'
,'Speed Skating', 'Speed', 'Specialized'), ncol=3, byrow = T)
sessions <- rbind(sessions,
matrix(c('Lane Swim', 'Lane', 'Lane'
,'50m Lane Swim', '50m Lane', 'Lane'
,'Family Swim', 'Family', 'General'
,'Adult Swim', 'Adult', 'General'
,'Public Swim', 'Public', 'General'
,'Wave Swim', 'Wave', 'General'
,'50+ Vitality', '50+ Vitality', 'Age Restricted'
,'50+ Swim', '50+', 'Age Restricted'
,'Teen Swim', 'Teen', 'Age Restricted'
,'Women Only', 'Women Only', 'Gender Restricted'
,'Women Only Family', 'Women Only Family', 'Gender Restricted'
,'Hot Tub / Sauna Only', 'Hot Tub/Sauna', 'Sauna'
,'Swim for Persons with a Disability', 'With Disability', 'With Disability'
,'Preschool Swim', 'Preschool', 'Age Restricted'), ncol=3, byrow = T))
colnames(sessions) <- c('Activity', 'ShortName', 'SessionGroup')
format_data <- function(p_activity='Skating') {
data <- load_data_raw(p_activity)
#----------------------------
#     Format dates
#----------------------------
#     Append current year to Date...
data$Date <- as.Date(paste0(data$Date, ', ', format(Sys.Date(), '%Y')), format = '%A, %B %d, %Y')
#     ...then add 1 year for any dates in the past
data[data$Date < Sys.Date(),]$Date <- data[data$Date < Sys.Date(),]$Date + years(1)
data <- cbind(data, trim(str_split(data$Time, '-', simplify = TRUE)))
setnames(data, old=c('V1', 'V2'), new=c('StartTime', 'EndTime'))
#----------------------------------------------------------------------------------
#     Join to Sessions lookup to shorten SessionType and retrieve SessionGroup
#----------------------------------------------------------------------------------
data$Activity <- gsub(pattern = paste0(p_activity, ' - '), replacement = '', x = data$Activity)
data <- merge(data, sessions, by = "Activity", all.x = TRUE)
data$SessionType <- data$shortname
#----------------------------------------------------
#     Join to Arenas lookup to retrieve Locale
#----------------------------------------------------
data <- merge(data, unique(facilities), by="Facility", all.x = TRUE)
data[,.(Date, StartTime, EndTime, Activity, ShortName, Facility, Locale, Longitude, Latitude, SessionGroup, SessionType)]
}
format_data()
format_data <- function(p_activity='Skating') {
data <- load_data_raw(p_activity)
#----------------------------
#     Format dates
#----------------------------
#     Append current year to Date...
data$Date <- as.Date(paste0(data$Date, ', ', format(Sys.Date(), '%Y')), format = '%A, %B %d, %Y')
#     ...then add 1 year for any dates in the past
data[data$Date < Sys.Date(),]$Date <- data[data$Date < Sys.Date(),]$Date + years(1)
data <- cbind(data, trim(str_split(data$Time, '-', simplify = TRUE)))
setnames(data, old=c('V1', 'V2'), new=c('StartTime', 'EndTime'))
#----------------------------------------------------------------------------------
#     Join to Sessions lookup to shorten SessionType and retrieve SessionGroup
#----------------------------------------------------------------------------------
data$Activity <- gsub(pattern = paste0(p_activity, ' - '), replacement = '', x = data$Activity)
data <- merge(data, sessions, by = "Activity", all.x = TRUE)
data$SessionType <- data$ShortName
#----------------------------------------------------
#     Join to Arenas lookup to retrieve Locale
#----------------------------------------------------
data <- merge(data, unique(facilities), by="Facility", all.x = TRUE)
data[,.(Date, StartTime, EndTime, Activity, ShortName, Facility, Locale, Longitude, Latitude, SessionGroup, SessionType)]
}
format_data()
write_tableau_data <- function(p_activity='Skating') {
write.table(x = format_data(p_activity), file = paste0(folder_clean, p_activity, '.csv'), sep = ',', row.names = FALSE)
}
write_tableau_data()
write_tableau_data('Swimming')
write_tableau_data('Swimming')
write_tableau_data('Swimming')
get_url(p_page=2)
get_city_url(p_page=2)
