anchor$Arena <- c('Valiquettes')
anchor$StartDate <- today()
anchor$EndDate <- today()
anchor$StartTime <- c('8:00')
anchor$EndTime <- c('17:00')
anchor$SessionType <- c('xxx')
anchor$Comments <- c('Nothing')
anchor$Latitude <- val_lat
anchor$Longitude <- val_long
anchor$Start <- NA
anchor$StartDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$StartTime))
anchor$EndDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$EndTime))
filtered <- rbind(filtered, anchor)
#     Return filtered dates without cancellations
filtered[is.na(filtered$Start), ]
}
debug(TransformData)
TransformData(formatted)
head(dates)
str(dates)
str(dates)
head(dates)
min(filtered$Date)
max(filtered$Date)
dates[dates$Date >= min(filtered$Date) & dates$Date <= max(filtered$Date)]
dates[dates$Date >= min(filtered$Date) & dates$Date <= max(filtered$Date),]
TransformData <- function(data) {
#install.packages("stringr")
library(stringr)
#     Create set of dates to be used
#     Recreating every time we run will remove old dates that are no longer relevant
#     This could act as a natural limiter to the data volume
dates <- seq(from = Sys.Date(), to = max(formatted$EndDate), by = "1 day")
dates <- as.data.frame(dates)
colnames(dates) <- c('Date')
dates$Day <- weekdays(dates[,1])
#     Join each schedule row to list of dates to get individual schedules
#     Keep all ancillary fields
all <- merge(dates, data, by = "Day")
filtered <- all[all$Date >= all$StartDate & all$Date <= all$EndDate, ]
#     Remove cancellations
cancellations <<- do.call(rbind, apply(formatted, 1, ParseCancellation))
filtered <- merge(filtered, cancellations, by.x = c("ID", "Date"), by.y = c("ID", "CancelDate"), all.x = TRUE)
#     Join time to dates
filtered$StartDateTime <- as.POSIXlt(paste(as.character(filtered$Date),  filtered$StartTime))
filtered$EndDateTime <- as.POSIXlt(paste(as.character(filtered$Date),  filtered$EndTime))
#     Add anchor / sponsorship
anchor <- dates[dates$Date >= min(filtered$Date) & dates$Date <= max(filtered$Date),]
anchor$ID <- "0"
anchor$Day <- weekdays(anchor$Date)
anchor$Arena <- c('Valiquettes')
anchor$StartDate <- today()
anchor$EndDate <- today()
anchor$StartTime <- c('8:00')
anchor$EndTime <- c('17:00')
anchor$SessionType <- c('xxx')
anchor$Comments <- c('Nothing')
anchor$Latitude <- val_lat
anchor$Longitude <- val_long
anchor$Start <- NA
anchor$StartDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$StartTime))
anchor$EndDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$EndTime))
filtered <- rbind(filtered, anchor)
#     Return filtered dates without cancellations
filtered[is.na(filtered$Start), ]
}
debug(TransformData)
TransformData(formatted)
val_lat <- 45.378163
val_long <- -75.752130
SkateDriver <- function() {
setwd("D:/Projects/Skating")
#     Avoid loading the data multiple times from the website
if (!exists('master_results')) {
master_results <<- LoadSkating()
}
formatted <<- FormatMaster(master_results)
schdays <<- TransformData(formatted)
write.csv(schdays[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'SessionType', 'Latitude', 'Longitude')], file="skating.csv")
}
SkateDriver()
unique(schdays$Arena)
View(schdays[schdays$Arena == 'Valiquettes'],)
View(schdays[schdays$Arena == 'Valiquettes',])
GetDates <- function(to, from) {
if (missing(from)) {
from <- Sys.Date()
}
dates <- seq(from = from, to = to, by = "1 day")
dates <- as.data.frame(dates)
colnames(dates) <- c('Date')
dates$Day <- weekdays(dates[,1])
}
GetDates <- function(to, from) {
if (missing(from)) {
from <- Sys.Date()
}
dates <- seq(from = from, to = to, by = "1 day")
dates <- as.data.frame(dates)
colnames(dates) <- c('Date')
dates$Day <- weekdays(dates[,1])
}
TransformData <- function(data) {
#install.packages("stringr")
library(stringr)
#     Create set of dates to be used
#     Recreating every time we run will remove old dates that are no longer relevant
#     This could act as a natural limiter to the data volume
dates <- GetDates(max(formatted$EndDate))
#     Join each schedule row to list of dates to get individual schedules
#     Keep all ancillary fields
all <- merge(dates, data, by = "Day")
filtered <- all[all$Date >= all$StartDate & all$Date <= all$EndDate, ]
#     Remove cancellations
cancellations <<- do.call(rbind, apply(formatted, 1, ParseCancellation))
filtered <- merge(filtered, cancellations, by.x = c("ID", "Date"), by.y = c("ID", "CancelDate"), all.x = TRUE)
#     Join time to dates
filtered$StartDateTime <- as.POSIXlt(paste(as.character(filtered$Date),  filtered$StartTime))
filtered$EndDateTime <- as.POSIXlt(paste(as.character(filtered$Date),  filtered$EndTime))
#     Add anchor / sponsorship
anchor <- dates[dates$Date >= min(filtered$Date) & dates$Date <= max(filtered$Date),]
anchor$ID <- "0"
anchor$Day <- weekdays(anchor$Date)
anchor$Arena <- c('Valiquettes')
anchor$StartDate <- today()
anchor$EndDate <- today()
anchor$StartTime <- c('8:00')
anchor$EndTime <- c('17:00')
anchor$SessionType <- c('xxx')
anchor$Comments <- c('Nothing')
anchor$Latitude <- val_lat
anchor$Longitude <- val_long
anchor$Start <- NA
anchor$StartDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$StartTime))
anchor$EndDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$EndTime))
filtered <- rbind(filtered, anchor)
#     Return filtered dates without cancellations
filtered[is.na(filtered$Start), ]
}
SkateDriver <- function() {
setwd("D:/Projects/Skating")
#     Avoid loading the data multiple times from the website
if (!exists('master_results')) {
master_results <<- LoadSkating()
}
formatted <<- FormatMaster(master_results)
schdays <<- TransformData(formatted)
write.csv(schdays[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'SessionType', 'Latitude', 'Longitude')], file="skating.csv")
}
SkateDriver()
GetDates(max(formatted$EndDate))
GetDates <- function(to, from) {
if (missing(from)) {
from <- Sys.Date()
}
dates <- seq(from = from, to = to, by = "1 day")
dates <- as.data.frame(dates)
colnames(dates) <- c('Date')
dates$Day <- weekdays(dates[,1])
dates
}
TransformData <- function(data) {
#install.packages("stringr")
library(stringr)
#     Create set of dates to be used
#     Recreating every time we run will remove old dates that are no longer relevant
#     This could act as a natural limiter to the data volume
dates <- GetDates(max(formatted$EndDate))
#     Join each schedule row to list of dates to get individual schedules
#     Keep all ancillary fields
all <- merge(dates, data, by = "Day")
filtered <- all[all$Date >= all$StartDate & all$Date <= all$EndDate, ]
#     Remove cancellations
cancellations <<- do.call(rbind, apply(formatted, 1, ParseCancellation))
filtered <- merge(filtered, cancellations, by.x = c("ID", "Date"), by.y = c("ID", "CancelDate"), all.x = TRUE)
#     Join time to dates
filtered$StartDateTime <- as.POSIXlt(paste(as.character(filtered$Date),  filtered$StartTime))
filtered$EndDateTime <- as.POSIXlt(paste(as.character(filtered$Date),  filtered$EndTime))
#     Add anchor / sponsorship
anchor <- dates[dates$Date >= min(filtered$Date) & dates$Date <= max(filtered$Date),]
anchor$ID <- "0"
anchor$Day <- weekdays(anchor$Date)
anchor$Arena <- c('Valiquettes')
anchor$StartDate <- today()
anchor$EndDate <- today()
anchor$StartTime <- c('8:00')
anchor$EndTime <- c('17:00')
anchor$SessionType <- c('xxx')
anchor$Comments <- c('Nothing')
anchor$Latitude <- val_lat
anchor$Longitude <- val_long
anchor$Start <- NA
anchor$StartDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$StartTime))
anchor$EndDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$EndTime))
filtered <- rbind(filtered, anchor)
#     Return filtered dates without cancellations
filtered[is.na(filtered$Start), ]
}
SkateDriver <- function() {
setwd("D:/Projects/Skating")
#     Avoid loading the data multiple times from the website
if (!exists('master_results')) {
master_results <<- LoadSkating()
}
formatted <<- FormatMaster(master_results)
schdays <<- TransformData(formatted)
write.csv(schdays[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'SessionType', 'Latitude', 'Longitude')], file="skating.csv")
}
SkateDriver()
CreateAnchor <- function() {
dates <- GetDates(max(formatted$EndDate))
#     Add anchor / sponsorship
anchor <- dates[dates$Date >= min(filtered$Date) & dates$Date <= max(filtered$Date),]
#anchor$ID <- "0"
#anchor$Day <- weekdays(anchor$Date)
#anchor$Arena <- c('Valiquettes')
#anchor$StartDate <- today()
#anchor$EndDate <- today()
anchor$StartTime <- c('8:00')
anchor$EndTime <- c('17:00')
#anchor$SessionType <- c('xxx')
#anchor$Comments <- c('Nothing')
anchor$Latitude <- val_lat
anchor$Longitude <- val_long
#anchor$Start <- NA
anchor$StartDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$StartTime))
anchor$EndDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$EndTime))
anchor
}
SkateDriver <- function() {
setwd("D:/Projects/Skating")
#     Avoid loading the data multiple times from the website
if (!exists('master_results')) {
master_results <<- LoadSkating()
}
formatted <<- FormatMaster(master_results)
schdays <<- TransformData(formatted)
write.csv(schdays[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'SessionType', 'Latitude', 'Longitude')], file="skating.csv")
anchor <- CreateAnchor()
write.csv(anchor)
}
SkateDriver()
CreateAnchor <- function() {
dates <- GetDates(max(formatted$EndDate))
#     Add anchor / sponsorship
anchor <- dates
#anchor$ID <- "0"
#anchor$Day <- weekdays(anchor$Date)
#anchor$Arena <- c('Valiquettes')
#anchor$StartDate <- today()
#anchor$EndDate <- today()
anchor$StartTime <- c('8:00')
anchor$EndTime <- c('17:00')
#anchor$SessionType <- c('xxx')
#anchor$Comments <- c('Nothing')
anchor$Latitude <- val_lat
anchor$Longitude <- val_long
#anchor$Start <- NA
anchor$StartDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$StartTime))
anchor$EndDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$EndTime))
anchor
}
SkateDriver <- function() {
setwd("D:/Projects/Skating")
#     Avoid loading the data multiple times from the website
if (!exists('master_results')) {
master_results <<- LoadSkating()
}
formatted <<- FormatMaster(master_results)
schdays <<- TransformData(formatted)
write.csv(schdays[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'SessionType', 'Latitude', 'Longitude')], file="skating.csv")
anchor <- CreateAnchor()
write.csv(anchor)
}
SkateDriver()
SkateDriver <- function() {
setwd("D:/Projects/Skating")
#     Avoid loading the data multiple times from the website
if (!exists('master_results')) {
master_results <<- LoadSkating()
}
formatted <<- FormatMaster(master_results)
schdays <<- TransformData(formatted)
write.csv(schdays[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'SessionType', 'Latitude', 'Longitude')], file="skating.csv")
anchor <<- CreateAnchor()
write.csv(anchor, file="anchor.csv")
}
SkateDriver()
head(anchor)
anchor
CreateAnchor <- function() {
dates <- GetDates(max(formatted$EndDate))
#     Add anchor / sponsorship
anchor <- dates
anchor$Latitude <- val_lat
anchor$Longitude <- val_long
anchor$StartDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  '8:00'))
anchor$EndDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  '17:00'))
anchor
}
SkateDriver <- function() {
setwd("D:/Projects/Skating")
#     Avoid loading the data multiple times from the website
if (!exists('master_results')) {
master_results <<- LoadSkating()
}
formatted <<- FormatMaster(master_results)
schdays <<- TransformData(formatted)
write.csv(schdays[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'SessionType', 'Latitude', 'Longitude')], file="skating.csv")
anchor <<- CreateAnchor()
write.csv(anchor, file="anchor.csv")
}
SkateDriver()
head(anchor)
unique(schdays$Arena)
TransformData <- function(data) {
#install.packages("stringr")
library(stringr)
#     Create set of dates to be used
#     Recreating every time we run will remove old dates that are no longer relevant
#     This could act as a natural limiter to the data volume
dates <- GetDates(max(formatted$EndDate))
#     Join each schedule row to list of dates to get individual schedules
#     Keep all ancillary fields
all <- merge(dates, data, by = "Day")
filtered <- all[all$Date >= all$StartDate & all$Date <= all$EndDate, ]
#     Remove cancellations
cancellations <<- do.call(rbind, apply(formatted, 1, ParseCancellation))
filtered <- merge(filtered, cancellations, by.x = c("ID", "Date"), by.y = c("ID", "CancelDate"), all.x = TRUE)
#     Join time to dates
filtered$StartDateTime <- as.POSIXlt(paste(as.character(filtered$Date),  filtered$StartTime))
filtered$EndDateTime <- as.POSIXlt(paste(as.character(filtered$Date),  filtered$EndTime))
#     Return filtered dates without cancellations
filtered[is.na(filtered$Start), ]
}
CreateAnchor <- function() {
dates <- GetDates(max(formatted$EndDate))
#     Add anchor / sponsorship
anchor <- dates
anchor$Latitude <- val_lat
anchor$Longitude <- val_long
anchor$StartDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  '8:00'))
anchor$EndDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  '17:00'))
anchor
}
SkateDriver <- function() {
setwd("D:/Projects/Skating")
#     Avoid loading the data multiple times from the website
if (!exists('master_results')) {
master_results <<- LoadSkating()
}
formatted <<- FormatMaster(master_results)
schdays <<- TransformData(formatted)
write.csv(schdays[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'SessionType', 'Latitude', 'Longitude')], file="skating.csv")
anchor <<- CreateAnchor()
write.csv(anchor, file="anchor.csv")
}
SkateDriver()
unique(schdays$Arena)
CreateAnchor <- function() {
dates <- GetDates(max(formatted$EndDate))
#     Add anchor / sponsorship
anchor <- dates
anchor$ID <- "0"
anchor$Day <- weekdays(anchor$Date)
anchor$Arena <- c('Valiquettes')
anchor$StartDate <- today()
anchor$EndDate <- today()
anchor$StartTime <- c('8:00')
anchor$EndTime <- c('17:00')
anchor$SessionType <- c('xxx')
anchor$Comments <- c('Nothing')
anchor$Latitude <- val_lat
anchor$Longitude <- val_long
anchor$Start <- NA
anchor$StartDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$StartTime))
anchor$EndDateTime <- as.POSIXlt(paste(as.character(anchor$Date),  anchor$EndTime))
anchor
}
SkateDriver <- function() {
setwd("D:/Projects/Skating")
#     Avoid loading the data multiple times from the website
if (!exists('master_results')) {
master_results <<- LoadSkating()
}
formatted <<- FormatMaster(master_results)
schdays <<- TransformData(formatted)
anchor <<- CreateAnchor()
schdays <- rbind(schdays, anchor)
write.csv(schdays[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'SessionType', 'Latitude', 'Longitude')], file="skating.csv")
}
SkateDriver()
unique(schdays$Arena)
head(anchor)
SkateDriver <- function() {
setwd("D:/Projects/Skating")
#     Avoid loading the data multiple times from the website
if (!exists('master_results')) {
master_results <<- LoadSkating()
}
formatted <<- FormatMaster(master_results)
schdays <<- TransformData(formatted)
anchor <<- CreateAnchor()
schdays <<- rbind(schdays, anchor)
write.csv(schdays[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'SessionType', 'Latitude', 'Longitude')], file="skating.csv")
}
SkateDriver()
unique(schdays$Arena)
(9.51-10)/(4.65/sqrt(40))
?pnorm
pnorm(9.51, 10, 4.65)
pnorm(x=9.51, mean=10, sd=4.65,n=40)
pnorm(9.51, mean=10, sd=4.65,n=40)
pnorm(9.51, 10, 4.65)
.9*.9
.91*.02
.91*.98
.81+.0182
.09*.9
.09*.1
.081+.0182
.91*.02
.081/(.081+.0182)
pnorm(90)
pnorm(1.65)
pnorm(1.39)
pnorm(1.28)
pnorm(1.29)
((1.29*18)/4)^2
((1.28*18)/4)^2
1.1/(4.9/sqrt(51))
pnorm(1.1/(4.9/sqrt(51)))
1-pnorm(1.1/(4.9/sqrt(51)))
1.645* (4.9/sqrt(51))
1.1+1.645* (4.9/sqrt(51))
1.1-1.645* (4.9/sqrt(51))
3.5/7.5/6
1-pnorm(3.5/7.5/6)
1-pnorm(3.5/(7.5/6))
1-pnorm(3.5/(7.5/6))*2
1-pnorm(3.5/(7.5/6)*2)
pnorm(3.5/(7.5/6)
)
pnorm(3.5/(7.5/6))
(1-pnorm(3.5/(7.5/6)))*2
(1-pnorm(3.4/(7.5/6)))*2
1.645*(sqrt((39^2)/1000)+((38^2)/1000))
3+1.645*(sqrt((39^2)/1000)+((38^2)/1000))
3-1.645*(sqrt((39^2)/1000)+((38^2)/1000))
3-1.65*(sqrt((39^2)/1000)+((38^2)/1000))
months <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')
(39^2)/1000)+((38^2)/1000)
(39^2)/1000)+(38^2)/1000)
3-1.65*(sqrt(((39^2)/1000)+((38^2)/1000)))
3+1.65*(sqrt(((39^2)/1000)+((38^2)/1000)))
(sqrt(((39^2)/1000)+((38^2)/1000)))
3/(sqrt(((39^2)/1000)+((38^2)/1000)))
(.07^2)*6580
(.09^2)*7021
(35-23.9)+1.96*(sqrt(((32.242)/6580)+((56.87)/7021)))
(35-23.9)
+1.96*(sqrt(((32.242)/6580)+((56.87)/7021)))
1.96*(sqrt(((32.242)/6580)+((56.87)/7021)))
(35-23.9)-1.96*(sqrt(((32.242)/6580)+((56.87)/7021)))
qt(p = .05,df = 28)
qt(.05, 28)
qt(.01, 11)
qt(.025, 28)
qt(.005, 11)
21.015-18.985
18.985 + ((21.015-18.985)/2)
(6*1.015)/1.96
qt(.025, 35)
(6*1.015)/2.03
.77/5
qt(.025, 24)
.27/.154
8/sqrt(20)
60-(1.73*1.79)
(128385-126550)/(sqrt(((7259^2)/10)+((7664^2)/10))
)
(128385-126550)/(sqrt((((7259^2)/10)+((7664^2)/10))))
(128385-126550)/(sqrt((((7259^2)/10)+((7664^2)/10))))
1835/(1176/sqrt(10))
(10.83-7.5)/(3.01/sqrt(6))
(10.83-7.5)
(2.57)*(3.01/sqrt(6))
3.33-(2.57)*(3.01/sqrt(6))
3.33+(2.57)*(3.01/sqrt(6))
(218.75-160.20)/sqrt(((52.24^2)/12)+((38.63^2)/10))
qt(.025,9)
(323.58-246.43)/sqrt(((64.43^2)/12)+((54.13^2)/14))
(323.58-246.43)/sqrt(((64.43^2)/12)+((54.13^2)/14)))
(323.58-246.43)/sqrt((((64.43^2)/12)+((54.13^2)/14)))
(323.58-246.43)/sqrt((((64.43^2)/12)+((54.13^2)/14)))
(52.1-27.1)/sqrt((((45.1^2)/22)+((26.4^2)/22)))
6.21/(12.3/sqrt(14))
2.86/(7.94/sqrt(14))
-3.21/(8.57/sqrt(14))
pf(15.36, 5, 65, lower.tail=false)
pf(15.36, 5, 65, lower.tail=F)
pf(15.36, 5, 65)
pf(15.36, 5, 65, lower.tail=F)
25575327-25564819
10508*4
25564819/50738
42032/503.8594
pf(83.4201, 4,50738)
10508/4
25564819/50734
2627/503.9
pf(5.213, 4,50734)
