rm(arenas)
arenas <- matrix(c('Barbara Ann Scott (Pinecrest Recreation Complex)', 'West End'
, 'Bell Centennial Arena', 'West End'
, 'Belltown Dome', 'West End'
, 'Bernard-GrandmaÃ®tre Arena', 'East'
, 'Blackburn Arena', 'East'
, 'Bob MacQuarrie Recreation Complex - OrlÃ©ans', 'East'
, 'Brewer Arena', 'Central'
, 'Brian Kilrea Arena', 'Central'
, 'Earl Armstrong Arena', 'East'
, 'Fred Barrett', 'South'
, 'Goulbourn Recreation Complex', 'West'
, 'Howard Darwin Centennial Arena', 'West End'
, 'J. Alph Dulude Arena', 'West End'
, 'Jack Charron Arena', 'West'
, 'Jim Durrell Complex', 'Central'
, 'John G. Mlacak Centre', 'West'
, 'Johnny Leroux Arena (Stittsville)', 'West'
, 'Kanata Recreation Complex', 'West'
, 'Larry Robinson Arena', 'South'
, 'Manotick Arena', 'South'
, 'McNabb Arena', 'Central'
, 'Minto Recreation Complex', 'South'
, 'Navan Memorial Centre', 'East'
, 'Nepean Sportsplex', 'West End'
, 'R. J. Kennedy Arena', 'East'
, 'Ray Friel Recreation Complex', 'East'
, 'Richmond Arena', 'South'
, 'Sandy Hill Arena', 'Central'
, 'St-Laurent Complex', 'East'
, 'Stuart Holmes (Osgoode) Arena', 'South'
, 'Tom Brown Arena', 'Central'
, 'W. Erskine Johnston Arena', 'West'
, 'Walter Baker Sports Centre', 'West'), ncol=2, byrow = T)
arenas <- rbind(arenas,
matrix(c('Bob MacQuarrie - OrlÃ©ans Pool', 'East'
, 'Brewer Pool', 'Central'
, 'Canterbury Pool', 'South'
, 'Champagne Pool', 'Central'
, 'Dovercourt', 'West End'
, 'Deborah Anne Kirwan Pool', 'South'
, 'FranÃ§ois Dupuis Pool', 'East'
, 'Goulbourn Pool', 'West'
, 'Jack Purcell Pool', 'Central'
, 'Kanata Wave Pool', 'West'
, 'Lowertown Pool', 'Central'
, 'Minto Recreation Complex - Barrhaven', 'South'
, 'Nepean Sportsplex Pools', 'West End'
, 'Pinecrest Pool', 'West End'
, 'Plant Pool', 'Central'
, 'Ray Friel Wave Pool', 'East'
, 'Richcraft Recreation Complex - Kanata', 'West'
, 'Sawmill Creek Pool', 'South'
, 'Splash Wave Pool', 'East'
, 'St-Laurent Pool', 'East'
, 'Walter Baker Pool', 'West'
, 'Y-Carlingwood', 'West End'
, 'Y-Ruddy Family', 'East'
, 'Y-Taggart Family', 'Central'
, 'Y-Clarence Rockland', 'East'), ncol=2, byrow = T))
colnames(arenas) <- c('Arena', 'Locale')
arenas <- as.data.frame(arenas)
arenas
arenas[grep('Y-',arenas$Arena)]
arenas[grep('Y-',arenas$Arena),]
arenas[!grep('Y-',arenas$Arena),]
arenas[grep('Y-',arenas$Arena),]
arenas[arenas$Arena !%in% arenas[grep('Y-',arenas$Arena),],]
arenas[arenas$Arena %in% arenas[grep('Y-',arenas$Arena),],]
arenas[grep('Y-',arenas$Arena),]
arenas[arenas$Arena %in% arenas[grep('Y-',arenas$Arena),c('Arena')],]
arenas[arenas$Arena not %in% arenas[grep('Y-',arenas$Arena),c('Arena')],]
arenas[arenas$Arena ! %in% arenas[grep('Y-',arenas$Arena),c('Arena')],]
arenas[grep('Y-',arenas$Arena),c('Arena')]
arenas[grep('Y-', arenas$Arena, invert = T), c('Arena')]
master_swimming <- master_swimming[master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena, invert = T), c('Arena')], ]
unique(master_swimming$Arena)
master_swimming <- master_swimming[master_swimming$Arena != 'Dovercourt', ]
unique(master_swimming$Arena)
unique(master2$Arena)
ymca <- as.data.frame(read.csv('YMCA', stringsAsFactor=F))
ymca <- as.data.frame(read.csv('YMCA.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, ymca)
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena, invert = T), c('Arena')], ]
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena, invert = T), c('Arena')]), ]
View(master_swimming)
master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena, invert = T), c('Arena')]), ]
master_swimming[which (master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena, invert = T), c('Arena')]), ]
master_swimming <- master2
master_swimming[which (master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena, invert = T), c('Arena')]), ]
master_swimming <- rbind(master_swimming, ymca)
master_swimming[which (master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena, invert = T), c('Arena')]), ]
master_swimming <- master_swimming[which (master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena, invert = T), c('Arena')]), ]
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
master_swimming <- rbind(master_swimming, ymca)
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
master_swimming <- master2
unique(master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), c('Arena)')])
master_swimming <- master2
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
master_swimming <- rbind(master_swimming, ymca)
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
#      master_swimming <- master2
#      arenas[arenas$Arena ! %in% arenas[grep('Y-',arenas$Arena),c('Arena')],]
ymca <- as.data.frame(read.csv('YMCA.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, ymca)
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
#      master_swimming <- master2
#      arenas[arenas$Arena ! %in% arenas[grep('Y-',arenas$Arena),c('Arena')],]
ymca <- as.data.frame(read.csv('YMCA.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, ymca)
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
SwimDriver <- function() {
#-----------------------------------------------------------------
#     Avoid loading the data multiple times from the website
#     Force a reload by dropping master_swimming
#-----------------------------------------------------------------
if (!exists('master_swimming')) {
fileUrl <- "http://app06.ottawa.ca/cgi-bin/schedulesearch/searchschedule.pl?stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fpublic_swimming_results_en.xsl&notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl&notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl&sq_event=Swimming&sq_lang=en&sort=location+asc%2Cstart_date+asc%2CdayNo+asc%2Cstart_time+asc%2Csession_type+asc&ret=http%3A%2F%2Fottawa.ca%2Fen%2Fnode%2F268957&sq_location=&sq_session_type=&sq_keywords1=&"
nextFileUrl <- "http://app06.ottawa.ca/cgi-bin/schedulesearch/searchschedule.pl?stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fpublic_swimming_results_en.xsl;notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl;notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl;sq_event=Swimming;sq_lang=en;sort=location%20asc%2Cstart_date%20asc%2CdayNo%20asc%2Cstart_time%20asc%2Csession_type%20asc;ret=http%3A%2F%2Fottawa.ca%2Fen%2Fnode%2F268957;sq_location=;sq_session_type=;sq_keywords1=;start="
master_swimming <<- LoadData(fileUrl, nextFileUrl)
}
#-------------------------------------------
#     Load Dovercourt data - Purge data first
#-------------------------------------------
master_swimming <- master_swimming[master_swimming$Arena != 'Dovercourt', ]
dovercourt <- as.data.frame(read.csv('Dovercourt.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, dovercourt)
#-------------------------------------------
#     Load YMCA data - Purge data first
#-------------------------------------------
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
ymca <- as.data.frame(read.csv('YMCA.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, ymca)
#     Process Swim Data
format_swim <<- FormatData(master_swimming)
schdays_swim <<- TransformData(format_swim)
write.csv(schdays_swim[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'Locale', 'SessionType', 'SessionGroup', 'Latitude', 'Longitude')], file="swimming.csv")
}
library('RCurl')
library('XML')
library('lubridate')
library('stringr')
setwd("D:/Projects/Skating")
months <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')
#---------------------------------
#     Define Session names
#---------------------------------
#rm(sessions)
sessions <- matrix(c('50+ Skating', '50+', 'Skating'
,'Adult Skating', 'Adult', 'Skating'
,'Family Skating', 'Family', 'Skating'
,'Public Skating', 'Public', 'Skating'
,'Unsupervised Skate', 'Unsupervised', 'Skating'
,'Pick-Up Hockey - 18+', 'Pickup 18+', 'Hockey'
,'Pick-Up Hockey - 35+', 'Pickup 35+', 'Hockey'
,'Pick-Up Hockey - 50+', 'Pickup 50+', 'Hockey'
,'Shinny Hockey - Children', 'Shinny - Children', 'Shinny'
,'Shinny Hockey - Youth', 'Shinny - Youth', 'Shinny'
,'Figure Skate', 'Figure', 'Specialized'
,'Speed Skating', 'Speed', 'Specialized'), ncol=3, byrow = T)
sessions <- rbind(sessions,
matrix(c('Lane Swim', 'Lane', 'Lane'
,'50m Lane Swim', '50m Lane', 'Lane'
,'Family Swim', 'Family', 'General'
,'Adult Swim', 'Adult', 'General'
,'Public Swim', 'Public', 'General'
,'Wave Swim', 'Wave', 'General'
,'50+ Vitality', '50+ Vitality', 'Age Restricted'
,'50+ Swim', '50+', 'Age Restricted'
,'Teen Swim', 'Teen', 'Age Restricted'
,'Women Only', 'Women Only', 'Gender Restricted'
,'Women Only Family', 'Women Only Family', 'Gender Restricted'
,'Hot Tub / Sauna Only', 'Hot Tub/Sauna', 'Sauna'
,'Swim for Persons with a Disability', 'With Disability', 'With Disability'
,'Preschool Swim', 'Preschool', 'Age Restricted'), ncol=3, byrow = T))
colnames(sessions) <- c('longname', 'shortname', 'SessionGroup')
sessions <- as.data.frame(sessions)
#---------------------------------
#     Define Arena names
#---------------------------------
#rm(arenas)
arenas <- matrix(c('Barbara Ann Scott (Pinecrest Recreation Complex)', 'West End'
, 'Bell Centennial Arena', 'West End'
, 'Belltown Dome', 'West End'
, 'Bernard-GrandmaÃ®tre Arena', 'East'
, 'Blackburn Arena', 'East'
, 'Bob MacQuarrie Recreation Complex - OrlÃ©ans', 'East'
, 'Brewer Arena', 'Central'
, 'Brian Kilrea Arena', 'Central'
, 'Earl Armstrong Arena', 'East'
, 'Fred Barrett', 'South'
, 'Goulbourn Recreation Complex', 'West'
, 'Howard Darwin Centennial Arena', 'West End'
, 'J. Alph Dulude Arena', 'West End'
, 'Jack Charron Arena', 'West'
, 'Jim Durrell Complex', 'Central'
, 'John G. Mlacak Centre', 'West'
, 'Johnny Leroux Arena (Stittsville)', 'West'
, 'Kanata Recreation Complex', 'West'
, 'Larry Robinson Arena', 'South'
, 'Manotick Arena', 'South'
, 'McNabb Arena', 'Central'
, 'Minto Recreation Complex', 'South'
, 'Navan Memorial Centre', 'East'
, 'Nepean Sportsplex', 'West End'
, 'R. J. Kennedy Arena', 'East'
, 'Ray Friel Recreation Complex', 'East'
, 'Richmond Arena', 'South'
, 'Sandy Hill Arena', 'Central'
, 'St-Laurent Complex', 'East'
, 'Stuart Holmes (Osgoode) Arena', 'South'
, 'Tom Brown Arena', 'Central'
, 'W. Erskine Johnston Arena', 'West'
, 'Walter Baker Sports Centre', 'West'), ncol=2, byrow = T)
arenas <- rbind(arenas,
matrix(c('Bob MacQuarrie - OrlÃ©ans Pool', 'East'
, 'Brewer Pool', 'Central'
, 'Canterbury Pool', 'South'
, 'Champagne Pool', 'Central'
, 'Dovercourt', 'West End'
, 'Deborah Anne Kirwan Pool', 'South'
, 'FranÃ§ois Dupuis Pool', 'East'
, 'Goulbourn Pool', 'West'
, 'Jack Purcell Pool', 'Central'
, 'Kanata Wave Pool', 'West'
, 'Lowertown Pool', 'Central'
, 'Minto Recreation Complex - Barrhaven', 'South'
, 'Nepean Sportsplex Pools', 'West End'
, 'Pinecrest Pool', 'West End'
, 'Plant Pool', 'Central'
, 'Ray Friel Wave Pool', 'East'
, 'Richcraft Recreation Complex - Kanata', 'West'
, 'Sawmill Creek Pool', 'South'
, 'Splash Wave Pool', 'East'
, 'St-Laurent Pool', 'East'
, 'Walter Baker Pool', 'West'
, 'Y-Carlingwood', 'West End'
, 'Y-Ruddy Family', 'East'
, 'Y-Taggart Family', 'Central'
, 'Y-Clarence Rockland', 'East'), ncol=2, byrow = T))
colnames(arenas) <- c('Arena', 'Locale')
arenas <- as.data.frame(arenas)
LoadData <- function(fileUrl, nextFileUrl) {
master <- data.frame()
startwith <- c(0)
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
#     Determine number of results
numFound <- as.integer(xpathSApply(rootNode, '//result', xmlGetAttr, "numFound"))
while(startwith < numFound) {
result_page <- do.call(rbind, xpathApply(doc, "/response/result/doc", function(node) {
xp <- './str[@name="id"]'
id <- xpathSApply(node, xp, xmlValue)
if (is.null(id)) id <- NA
xp <- './arr[@name="location"]'
location <- xpathSApply(node, xp, xmlValue)
if (is.null(location)) location <- NA
xp <- './str[@name="location_map"]'
location_map <- xpathSApply(node, xp, xmlValue)
if (is.null(location_map)) location_map <- NA
xp <- './arr[@name="day"]'
day <- xpathSApply(node, xp, xmlValue)
if (is.null(day)) day <- NA
xp <- './date[@name="start_date"]'
start_date <- xpathSApply(node, xp, xmlValue)
if (is.null(start_date)) start_date <- NA
xp <- './date[@name="end_date"]'
end_date <- xpathSApply(node, xp, xmlValue)
if (is.null(end_date)) end_date <- NA
xp <- './str[@name="start_time"]'
starttime <- xpathSApply(node, xp, xmlValue)
if (is.null(starttime)) starttime <- NA
xp <- './str[@name="end_time"]'
endtime <- xpathSApply(node, xp, xmlValue)
if (is.null(endtime)) endtime <- NA
xp <- './arr[@name="session_type"]'
session_type <- xpathSApply(node, xp, xmlValue)
if (is.null(session_type)) session_type <- NA
#     To handle missing comments, append an 'x' on the end
#     of the retrieved value.
#     This was the only way I could find that worked
xp <- './arr[@name="comments"]'
comments <- xpathSApply(node, xp, xmlValue)
comments <- paste(comments, 'x')
#     comments_special only exists in swim data
xp <- './arr[@name="comments_special"]'
comments_special <- xpathSApply(node, xp, xmlValue)
comments_special <- paste(comments_special, 'x')
#     Join everything together into a single data.frame
data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, comments_special, location_map, stringsAsFactors = FALSE)
}))
#     Copy page of results into master data frame
master <- rbind(master, result_page)
#     Move to the next set of results
#     This is based on the assumption that the web site returns
#     exactly 25 records
startwith <- startwith + 25
nextPage <- paste(nextFileUrl, startwith, sep="")
doc <- xmlTreeParse(nextPage, useInternal = TRUE)
rootNode <- xmlRoot(doc)
}
colnames(master) <- c('ID', 'Arena', 'Day', 'StartDate', 'EndDate', 'StartTime', 'EndTime', 'SessionType', 'Comments', 'Special', 'LocationMap')
master
}
FormatData <- function(master_results) {
formatted <- master_results
#     Remove pools that are closed for annual maintenance
formatted <- formatted[grep('closed for annual', formatted$Special, invert = TRUE), ]
formatted$StartDate <- as.Date(formatted$StartDate)
formatted$EndDate <- as.Date(formatted$EndDate)
formatted$Latitude <- as.numeric(gsub(".*LAT=(.*)&LON.*", "\\1",  formatted$LocationMap))
formatted$Longitude <- as.numeric(gsub(".*LON=(.*)&feat.*", "\\1",  formatted$LocationMap))
#----------------------------------------------------------
#     Manually add missing Longitude and Latitude
#----------------------------------------------------------
formatted[formatted$Arena == 'Johnny Leroux Arena (Stittsville)', "Latitude"] <- 45.260748
formatted[formatted$Arena == 'Johnny Leroux Arena (Stittsville)', "Longitude"] <- -75.925043
formatted[formatted$Arena == 'Dovercourt', "Latitude"] <- 45.383344
formatted[formatted$Arena == 'Dovercourt', "Longitude"] <- -75.752209
formatted[formatted$Arena == 'Y-Carlingwood', "Latitude"] <- 45.372740
formatted[formatted$Arena == 'Y-Carlingwood', "Longitude"] <- -75.769143
formatted[formatted$Arena == 'Y-Clarence Rockland', "Latitude"] <- 45.550633
formatted[formatted$Arena == 'Y-Clarence Rockland', "Longitude"] <- -75.286126
formatted[formatted$Arena == 'Y-Ruddy Family', "Latitude"] <- 45.481451
formatted[formatted$Arena == 'Y-Ruddy Family', "Longitude"] <- -75.508211
formatted[formatted$Arena == 'Y-Taggart Family', "Latitude"] <- 45.411486
formatted[formatted$Arena == 'Y-Taggart Family', "Longitude"] <- -75.689558
#     Remove LocationMap column after taking Latitude & Longitude
formatted[ , -which(names(formatted) %in% c('LocationMap'))]
#----------------------------------------------------------------------------------
#     Join to Sessions lookup to shorten SessionType and retrieve SessionGroup
#----------------------------------------------------------------------------------
formatted <- merge(formatted, sessions, by.x = "SessionType", by.y = "longname", all.x = T)
formatted$SessionType <- formatted$shortname
#----------------------------------------------------
#     Join to Arenas lookup to retrieve Locale
#----------------------------------------------------
formatted <- merge(formatted, arenas, all.x = T)
#----------------------------------------------------
#     Clean up Arena Names
#----------------------------------------------------
formatted$Arena <- gsub('( Pools)|( Pool)|( Arena)|( Recreation Complex)', '', formatted$Arena)
formatted
}
ParseCancellations <- function(x) {
all_cancels <- data.frame()
for(m in months) {
can <- str_extract(x["Comments"], paste(m, " [0-9, ]+", sep=""))
if(!is.na(can)) {
cancel <- str_extract_all(can, "[0-9]+")
canceldates <- as.Date(paste('2014-', m, '-', cancel[[1]], sep=''), format = "%Y-%b-%d")
#     Join everything together into a single data.frame
for(d in canceldates[[1]]) {
all_cancels <- rbind(all_cancels, data.frame(x["ID"], x["StartDate"], as.Date(d, origin="1970-01-01"), stringsAsFactors = FALSE))
}
}
}
if (nrow(all_cancels) > 0) {
colnames(all_cancels) <- c('ID', 'Start', 'CancelDate')
all_cancels$CancelDate <- as.Date(ifelse(all_cancels$CancelDate < all_cancels$Start, all_cancels$CancelDate + years(1), all_cancels$CancelDate), origin = '1970/1/1')
all_cancels
}
}
GetDates <- function(to, from) {
if (missing(from)) {
from <- Sys.Date()
}
dates <- seq(from = from, to = to, by = "1 day")
dates <- as.data.frame(dates)
colnames(dates) <- c('Date')
dates$Day <- weekdays(dates[,1])
dates
}
TransformData <- function(data) {
#     Create set of dates to be used
#     Recreating every time we run will remove old dates that are no longer relevant
#     This could act as a natural limiter to the data volume
dates <- GetDates(max(data$EndDate))
#     Join each schedule row to list of dates to get individual schedules
#     Keep all ancillary fields
all <- merge(dates, data, by = "Day")
filtered <- all[all$Date >= all$StartDate & all$Date <= all$EndDate, ]
#     Remove cancellations
cancellations <<- do.call(rbind, apply(data, 1, ParseCancellations))
filtered <- merge(filtered, cancellations, by.x = c("ID", "Date"), by.y = c("ID", "CancelDate"), all.x = TRUE)
#     Join time to dates
filtered$StartDateTime <- as.POSIXlt(paste(as.character(filtered$Date),  filtered$StartTime))
filtered$EndDateTime <- as.POSIXlt(paste(as.character(filtered$Date),  filtered$EndTime))
#     Return filtered dates without cancellations
filtered[is.na(filtered$Start), ]
}
#-------------------------------------------------------------------------------
#     The drivers could be consolidated somewhat but it's easier keeping
#     the variable names separate for debugging purposes.
#     They will also start to diverge more once non-city schedules are added
#     to the dataset
#-------------------------------------------------------------------------------
SkateDriver <- function() {
#     Avoid loading the data multiple times from the website
if (!exists('master_skating')) {
fileUrl <- "http://app06.ottawa.ca/cgi-bin/schedulesearch/searchschedule.pl?stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fpublic_skating_results_en.xsl&sq_event=Skating&sq_lang=en&sort=location+asc%2CdayNo+asc%2Cstart_date+asc%2Cstart_time+asc%2Csession_type+asc&ret=http%3A%2F%2Fottawa.ca%2Fen%2Fnode%2F268948&notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_skating_en.xsl&sq_location=&sq_session_type=&sq_keywords1=&"
nextFileUrl <- "http://app06.ottawa.ca/cgi-bin/schedulesearch/searchschedule.pl?stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fpublic_skating_results_en.xsl;sq_event=Skating;sq_lang=en;sort=location%20asc%2CdayNo%20asc%2Cstart_date%20asc%2Cstart_time%20asc%2Csession_type%20asc;ret=http%3A%2F%2Fottawa.ca%2Fen%2Fnode%2F268948;notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_skating_en.xsl;sq_location=;sq_session_type=;sq_keywords1=;start="
master_skating <<- LoadData(fileUrl, nextFileUrl)
}
format_skate <<- FormatData(master_skating)
schdays_skate <<- TransformData(format_skate)
write.csv(schdays_skate[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'Locale', 'SessionType', 'SessionGroup', 'Latitude', 'Longitude')], file="skating.csv")
}
SwimDriver <- function() {
#-----------------------------------------------------------------
#     Avoid loading the data multiple times from the website
#     Force a reload by dropping master_swimming
#-----------------------------------------------------------------
if (!exists('master_swimming')) {
fileUrl <- "http://app06.ottawa.ca/cgi-bin/schedulesearch/searchschedule.pl?stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fpublic_swimming_results_en.xsl&notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl&notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl&sq_event=Swimming&sq_lang=en&sort=location+asc%2Cstart_date+asc%2CdayNo+asc%2Cstart_time+asc%2Csession_type+asc&ret=http%3A%2F%2Fottawa.ca%2Fen%2Fnode%2F268957&sq_location=&sq_session_type=&sq_keywords1=&"
nextFileUrl <- "http://app06.ottawa.ca/cgi-bin/schedulesearch/searchschedule.pl?stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fpublic_swimming_results_en.xsl;notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl;notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl;sq_event=Swimming;sq_lang=en;sort=location%20asc%2Cstart_date%20asc%2CdayNo%20asc%2Cstart_time%20asc%2Csession_type%20asc;ret=http%3A%2F%2Fottawa.ca%2Fen%2Fnode%2F268957;sq_location=;sq_session_type=;sq_keywords1=;start="
master_swimming <<- LoadData(fileUrl, nextFileUrl)
}
#-------------------------------------------
#     Load Dovercourt data - Purge data first
#-------------------------------------------
master_swimming <- master_swimming[master_swimming$Arena != 'Dovercourt', ]
dovercourt <- as.data.frame(read.csv('Dovercourt.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, dovercourt)
#-------------------------------------------
#     Load YMCA data - Purge data first
#-------------------------------------------
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
ymca <- as.data.frame(read.csv('YMCA.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, ymca)
#     Process Swim Data
format_swim <<- FormatData(master_swimming)
schdays_swim <<- TransformData(format_swim)
write.csv(schdays_swim[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'Locale', 'SessionType', 'SessionGroup', 'Latitude', 'Longitude')], file="swimming.csv")
}
rm(test)
SwimDriver()
View(master_swimming)
SwimDriver <- function() {
#-----------------------------------------------------------------
#     Avoid loading the data multiple times from the website
#     Force a reload by dropping master_swimming
#-----------------------------------------------------------------
if (!exists('master_swimming')) {
fileUrl <- "http://app06.ottawa.ca/cgi-bin/schedulesearch/searchschedule.pl?stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fpublic_swimming_results_en.xsl&notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl&notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl&sq_event=Swimming&sq_lang=en&sort=location+asc%2Cstart_date+asc%2CdayNo+asc%2Cstart_time+asc%2Csession_type+asc&ret=http%3A%2F%2Fottawa.ca%2Fen%2Fnode%2F268957&sq_location=&sq_session_type=&sq_keywords1=&"
nextFileUrl <- "http://app06.ottawa.ca/cgi-bin/schedulesearch/searchschedule.pl?stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fpublic_swimming_results_en.xsl;notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl;notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl;sq_event=Swimming;sq_lang=en;sort=location%20asc%2Cstart_date%20asc%2CdayNo%20asc%2Cstart_time%20asc%2Csession_type%20asc;ret=http%3A%2F%2Fottawa.ca%2Fen%2Fnode%2F268957;sq_location=;sq_session_type=;sq_keywords1=;start="
master_swimming <<- LoadData(fileUrl, nextFileUrl)
}
#-------------------------------------------
#     Load Dovercourt data - Purge data first
#-------------------------------------------
master_swimming <- master_swimming[master_swimming$Arena != 'Dovercourt', ]
dovercourt <- as.data.frame(read.csv('Dovercourt.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, dovercourt)
#-------------------------------------------
#     Load YMCA data - Purge data first
#-------------------------------------------
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
ymca <- as.data.frame(read.csv('YMCA.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, ymca)
#     Process Swim Data
format_swim <<- FormatData(master_swimming)
schdays_swim <<- TransformData(format_swim)
write.csv(schdays_swim[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'Locale', 'SessionType', 'SessionGroup', 'Latitude', 'Longitude')], file="swimming.csv")
}
SwimDriver()
master_swimming <- master_swimming[master_swimming$Arena != 'Dovercourt', ]
dovercourt <- as.data.frame(read.csv('Dovercourt.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, dovercourt)
master_swimming <- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
ymca <- as.data.frame(read.csv('YMCA.csv', stringsAsFactor=F))
master_swimming <- rbind(master_swimming, ymca)
format_swim <<- FormatData(master_swimming)
schdays_swim <<- TransformData(format_swim)
write.csv(schdays_swim[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'Locale', 'SessionType', 'SessionGroup', 'Latitude', 'Longitude')], file="swimming.csv")
SwimDriver <- function() {
#-----------------------------------------------------------------
#     Avoid loading the data multiple times from the website
#     Force a reload by dropping master_swimming
#-----------------------------------------------------------------
if (!exists('master_swimming')) {
fileUrl <- "http://app06.ottawa.ca/cgi-bin/schedulesearch/searchschedule.pl?stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fpublic_swimming_results_en.xsl&notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl&notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl&sq_event=Swimming&sq_lang=en&sort=location+asc%2Cstart_date+asc%2CdayNo+asc%2Cstart_time+asc%2Csession_type+asc&ret=http%3A%2F%2Fottawa.ca%2Fen%2Fnode%2F268957&sq_location=&sq_session_type=&sq_keywords1=&"
nextFileUrl <- "http://app06.ottawa.ca/cgi-bin/schedulesearch/searchschedule.pl?stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fpublic_swimming_results_en.xsl;notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl;notfound_stylesheet=http%3A%2F%2Fapp06.ottawa.ca%2Ftemplates%2Fxslt%2Fresults_notfound_en.xsl;sq_event=Swimming;sq_lang=en;sort=location%20asc%2Cstart_date%20asc%2CdayNo%20asc%2Cstart_time%20asc%2Csession_type%20asc;ret=http%3A%2F%2Fottawa.ca%2Fen%2Fnode%2F268957;sq_location=;sq_session_type=;sq_keywords1=;start="
master_swimming <<- LoadData(fileUrl, nextFileUrl)
}
#----------------------------------------------
#     Load Dovercourt data - Purge data first
#----------------------------------------------
master_swimming <<- master_swimming[master_swimming$Arena != 'Dovercourt', ]
dovercourt <<- as.data.frame(read.csv('Dovercourt.csv', stringsAsFactor=F))
master_swimming <<- rbind(master_swimming, dovercourt)
#-------------------------------------------
#     Load YMCA data - Purge data first
#-------------------------------------------
master_swimming <<- master_swimming[which (! master_swimming$Arena %in% arenas[grep('Y-', arenas$Arena), c('Arena')]), ]
ymca <<- as.data.frame(read.csv('YMCA.csv', stringsAsFactor=F))
master_swimming <<- rbind(master_swimming, ymca)
#     Process Swim Data
format_swim <<- FormatData(master_swimming)
schdays_swim <<- TransformData(format_swim)
write.csv(schdays_swim[,c('Date', 'StartDateTime', 'EndDateTime', 'Arena', 'Locale', 'SessionType', 'SessionGroup', 'Latitude', 'Longitude')], file="swimming.csv")
}
SwimDriver()
master_swimming <- master2
SwimDriver()
View(master_swimming
)
View(master_swimming)
View(format_swim)
