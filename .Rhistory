p_page <- p_page + 1
if(p_test || p_page > 3) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date()))))
}
}
retrieve_data(p_activity='skating', p_test=T)
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
url <- get_url(p_activity, p_page)
print(url)
doc <- htmlTreeParse(url, useInternal = TRUE)
activities <- readHTMLTable(doc, as.data.frame = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_page > 3) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date()))))
}
}
retrieve_data(p_activity='skating', p_test=T)
x<-retrieve_data(p_activity='skating', p_test=T)
View(x)
doc <- xmlTreeParse(url, useInternal = TRUE)
doc <- htmlTreeParse(url, useInternal = TRUE)
url
doc
length(doc)
activities <- readHTMLTable(doc, as.data.frame = TRUE)
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
url <- get_url(p_activity, p_page)
print(url)
doc <- htmlTreeParse(url, useInternal = TRUE)
activities <- readHTMLTable(doc, as.data.frame = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_page > 3) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date()))))
}
}
x<-retrieve_data(p_activity='skating', p_test=T)
source("general.R")
library(lubridate)
library(stringr)
library(RCurl)
library(XML)
library(data.table)
activity_group <- as.data.frame(
matrix(c('skating', '593',
'swimming', '589',
'aquafit', '608',
'spinning', '617',
'fitness', '616',
'yoga', '607',
'sports', '678'), ncol = 2, byrow = T))
colnames(activity_group) <- c('name' ,'code')
#------------------------------------
#     Web Scraping Functions
#------------------------------------
get_url <- function(p_activity = 'skating',
p_page=0) {
url <- paste0('http://ottawa.ca/2/en/residents/parks-and-recreation/drop-in-programs?f[0]=field_diss_activity%3A', activity_group[activity_group==p_activity,c('code')])
if(p_page>0) {
url <- paste0(url, '&page=', as.character(p_page))
}
url
}
#     get_url(p_page=2)
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
url <- get_url(p_activity, p_page)
print(url)
doc <- htmlTreeParse(url, useInternal = TRUE)
activities <- readHTMLTable(doc, as.data.frame = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_page > 3) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date()))))
}
}
x<-retrieve_data(p_activity='skating', p_test=T)
x
url
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
city_url <- get_url(p_activity, p_page)
print(city_url)
doc <- htmlTreeParse(file = city_url, useInternal = TRUE)
activities <- readHTMLTable(doc, as.data.frame = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_page > 3) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date()))))
}
}
x<-retrieve_data(p_activity='skating', p_test=T)
x
city_url <- 'http://ottawa.ca/2/en/residents/parks-and-recreation/drop-in-programs?f[0]=field_diss_activity%3A593'
doc <- htmlTreeParse(file = city_url, useInternal = TRUE)
doc
xmlTreeParse(file=city_url)
htmlTreeParse(file=city_url)
doc <- htmlTreeParse(file = city_url, useInternal = TRUE, isURL = TRUE, trim = TRUE, encoding = 'UTF-8')
doc
doc <- htmlTreeParse(file = city_url, useInternal = TRUE, isURL = TRUE, trim = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE)
activities
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
activities
doc <- htmlTreeParse(file = city_url, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
activities
tabs <- getURL(url)
tabs <- getURL(city_url)
doc <- htmlTreeParse(file = tabs, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
tabs
tabs[[2]]
tabs[[1]]
tabs[[3]]
tabs
library(httr)
GET(city_url)
tabs <- getURL(city_url)
doc <- htmlTreeParse(file = tabs, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
tabs <- GET(city_url)
doc <- htmlTreeParse(file = tabs, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
doc
get_city_url <- function(p_activity = 'skating',
p_page=0) {
activities_url <- paste0('http://ottawa.ca/2/en/residents/parks-and-recreation/drop-in-programs?f[0]=field_diss_activity%3A', activity_group[activity_group==p_activity,c('code')])
if(p_page>0) {
activities_url <- paste0(activities_url, '&page=', as.character(p_page))
}
activities_url
}
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, p_page)
print(city_url)
tabs <- GET(city_url)
doc <- htmlTreeParse(file = tabs, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_page > 3) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date()))))
}
}
x<-retrieve_data(p_activity='skating', p_test=T)
x
RCurl::GET(city_url)
httr::GET(city_url)
x
x<-retrieve_data(p_activity='skating', p_test=F)
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, p_page)
print(city_url)
#   For some reason, needed to use httr::GET. htmlTreeParse retrieved the wrong data
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_page > 3) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date()), '.RDS')))
}
}
x<-retrieve_data(p_activity='skating', p_test=F)
x<-retrieve_data(p_activity='skating', p_test=F)
readRDS(paste0(folder_raw, 'skating_20161216))
)
z<-readRDS(paste0(folder_raw, 'skating_20161216))
z<-readRDS(file = paste0(folder_raw, 'skating_20161216))
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, p_page)
print(city_url)
#   For some reason, needed to use httr::GET. htmlTreeParse retrieved the wrong data
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_page > 3) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
x<-retrieve_data(p_activity='skating', p_test=F)
z<-readRDS(file = paste0(folder_raw, 'skating_20161216.rds'))
z
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, p_page)
print(city_url)
#   For some reason, needed to use httr::GET. htmlTreeParse retrieved the wrong data
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_page > 10) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
source("general.R")
library(lubridate)
library(stringr)
library(RCurl)
library(XML)
library(data.table)
activity_group <- as.data.frame(
matrix(c('skating', '593',
'swimming', '589',
'aquafit', '608',
'spinning', '617',
'fitness', '616',
'yoga', '607',
'sports', '678'), ncol = 2, byrow = T))
colnames(activity_group) <- c('name' ,'code')
#------------------------------------
#     Web Scraping Functions
#------------------------------------
get_city_url <- function(p_activity = 'skating',
p_page=0) {
activities_url <- paste0('http://ottawa.ca/2/en/residents/parks-and-recreation/drop-in-programs?f[0]=field_diss_activity%3A', activity_group[activity_group==p_activity,c('code')])
if(p_page>0) {
activities_url <- paste0(activities_url, '&page=', as.character(p_page))
}
activities_url
}
#     get_url(p_page=2)
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, p_page)
print(city_url)
#   For some reason, needed to use httr::GET. htmlTreeParse retrieved the wrong data
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_page > 10) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
x<-retrieve_data(p_activity='skating', p_test=F)
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, p_page)
print(city_url)
#   For some reason, needed to use httr::GET. htmlTreeParse retrieved the wrong data
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(test & p_page > 10) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
rm(x)
retrieve_data(p_activity='skating', p_test=F)
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, p_page)
print(city_url)
#   For some reason, needed to use httr::GET. htmlTreeParse retrieved the wrong data
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#  data.frame(id, location, day, start_date, end_date, starttime, endtime, session_type, comments, stringsAsFactors = FALSE)
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_test & p_page > 10) break
}
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
retrieve_data(p_activity='skating', p_test=F)
z<-readRDS(file = paste0(folder_raw, 'skating_20161217.rds'))
z
retrieve_data(p_activity='swimming', p_test=F)
rm(z)
z<-readRDS(file = paste0(folder_raw, 'skating_20161217.rds'))
class(z)
dt <- as.data.table(x)
dt <- as.data.table(z)
write.table(dt, 'skating_20161217.csv')
x<- fread(input = 'skating_20161217.csv')
View(z)
View(x)
View(dt)
write.table(x = dt, file = 'skating_20161217.csv', append = FALSE, sep = ",")
rm(x)
x<- fread(input = 'skating_20161217.csv')
dt
dt[1,]
trimws(dt[1,])
trimws(dt[1,1])
trim(dt[1,1])
dt[1,]
trim(dt[1,])
names(dt)
z
head(z)
retrieve_data <- function(p_activity = 'skating', p_page = 0, p_test = TRUE) {
all_results <- data.frame()
#     Repeat until a single record is retrieved
repeat {
city_url <- get_city_url(p_activity, p_page)
print(city_url)
#   For some reason, needed to use httr::GET. htmlTreeParse retrieved the wrong data
acts <- httr::GET(city_url)
doc <- htmlTreeParse(file = acts, useInternal = TRUE, isURL = TRUE, encoding = 'UTF-8')
activities <- readHTMLTable(doc, as.data.frame = TRUE, trim = TRUE)
if(length(activities) > 0) {
result_page <- cbind(activities[[1]], node_url=xpathSApply(doc, '//td[@class="views-field views-field-field-diss-repeating"]//a/@href'))
} else {
break
}
#     Copy page of results into master data frame
all_results <- rbind(all_results, result_page)
#     Move to the next set of results
p_page <- p_page + 1
if(p_test & p_page > 2) break
}
names(all_results) <- c('Facility', 'Activity', 'Date', 'Time', 'Details', 'node_url')
if(p_test) {
all_results
} else {
saveRDS(object = all_results, file = paste0(folder_raw, p_activity, '_', gsub('-', '', ymd(Sys.Date())), '.rds'))
}
}
retrieve_data(p_activity='yoga', p_test=T)
rdsfile<-'skating_20161217.rds'
z<-readRDS(file = paste0(folder_raw, rdsfile))
folder_raw <- 'data_raw/'
z<-readRDS(file = paste0(folder_raw, rdsfile))
head(z)
names(z) <- c('Facility', 'Activity', 'Date', 'Time', 'Details', 'node_url')
head(z)
saveRDS(object = z, file = rdsfile)
saveRDS(object = z, file = paste0(folder_raw, rdsfile))
zz<-readRDS(file = paste0(folder_raw, rdsfile))
View(z)
View(zz)
rdsfile<-'swimming_20161217.rds'
z<-readRDS(file = paste0(folder_raw, rdsfile))
head(z)
names(z) <- c('Facility', 'Activity', 'Date', 'Time', 'Details', 'node_url')
head(z)
saveRDS(object = z, file = paste0(folder_raw, rdsfile))
zz<-readRDS(file = paste0(folder_raw, rdsfile))
names(z)
names(zz)
View(zz)
